// Generated by CoffeeScript 1.7.1
var assetUrlParse;

assetUrlParse = require("../lib/asseturlparse");

describe("parses url production url", function() {
  var url, urlOb, _i, _len, _ref, _results;
  _ref = ["/pile/min/cachekey/my.js?v=43234", "/pile/min/my.js"];
  _results = [];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    url = _ref[_i];
    urlOb = assetUrlParse(url);
    it("is minified", function() {
      return expect(urlOb.min).to.be.ok();
    });
    it("name is my", function() {
      return expect(urlOb.name).to.be("my");
    });
    _results.push(it("has extension js", function() {
      return expect(urlOb.ext).to.be("js");
    }));
  }
  return _results;
});

describe("can find global", function() {
  var urlOb;
  urlOb = assetUrlParse("/pile/min/cachekey/global.js?v=67cc16bec85749bfe34592397e4a31b0f47d4c59");
  it("has the default global", function() {
    expect(urlOb.min).to.be.ok();
    expect(urlOb.dev).to.not.be.ok();
    return expect(urlOb.name).to.be("global");
  });
  return it("has extension js", function() {
    return expect(urlOb.ext).to.be("js");
  });
});

describe("parses url development url", function() {
  var url, urlOb, _i, _len, _ref, _results;
  _ref = ["/pile/dev/cachekey/my.exec-123.js?v=43234", "/pile/dev/cachekey/my.exec-123.js"];
  _results = [];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    url = _ref[_i];
    urlOb = assetUrlParse(url);
    it("name is my", function() {
      return expect(urlOb.name).to.be("my");
    });
    it("is dev", function() {
      return expect(urlOb.dev).to.be.ok();
    });
    it("has uid 123", function() {
      return expect(urlOb.dev.uid).to.be("123");
    });
    it("has type exec", function() {
      return expect(urlOb.dev.type).to.be("exec");
    });
    _results.push(it("has ext js", function() {
      return expect(urlOb.ext).to.be("js");
    }));
  }
  return _results;
});

describe("parses css urls too", function() {
  var url, urlOb, _i, _len, _ref, _results;
  _ref = ["/pile/dev/cachekey/my.file-321.css?v=43234", "/pile/dev/cachekey/my.file-321.css"];
  _results = [];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    url = _ref[_i];
    urlOb = assetUrlParse(url);
    it("is css", function() {
      return expect(urlOb.ext).to.be("css");
    });
    it("is dev", function() {
      return expect(urlOb.dev).to.be.ok();
    });
    _results.push(it("is has name my", function() {
      return expect(urlOb.name).to.be("my");
    }));
  }
  return _results;
});

describe("longer custom url root works too", function() {
  var urlOb;
  urlOb = assetUrlParse("/node-pile/pile/min/cachekey/global.js?v=67cc16bec85749bfe34592397e4a31b0f47d4c59");
  it("is min", function() {
    return expect(urlOb.min).to.be.ok();
  });
  it("is not development", function() {
    return expect(urlOb.dev).to.be.an('undefined');
  });
  return it("it is the global pile", function() {
    return expect(urlOb.name).to.be("global");
  });
});

describe("longer custom url root works too and in development", function() {
  var urlOb;
  urlOb = assetUrlParse("/node-pile/pile/dev/cachekey/my.file-321.css?v=43234");
  it("is min", function() {
    return expect(urlOb.min).to.be.an('undefined');
  });
  it("is not development", function() {
    return expect(urlOb.dev).to.be.ok();
  });
  it("it is the global pile", function() {
    return expect(urlOb.name).to.be("my");
  });
  return it("has id 321", function() {
    return expect(urlOb.dev.uid).to.be("321");
  });
});
